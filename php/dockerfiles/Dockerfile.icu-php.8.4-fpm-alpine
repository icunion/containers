FROM php:8.4-fpm-alpine AS base

# Install main required packages
RUN apk add zlib libpng openldap imagemagick imagemagick-pdf libgomp yaml icu-libs

# Install sqlsrv deps
RUN apk add --no-cache curl unixodbc unixodbc-dev ca-certificates && update-ca-certificates
RUN cd /tmp && \
    curl -O https://download.microsoft.com/download/7/6/d/76de322a-d860-4894-9945-f0cc5d6a45f8/msodbcsql18_18.4.1.1-1_amd64.apk && \
    curl -O https://download.microsoft.com/download/7/6/d/76de322a-d860-4894-9945-f0cc5d6a45f8/mssql-tools18_18.4.1.1-1_amd64.apk && \
    apk add --allow-untrusted msodbcsql18_18.4.1.1-1_amd64.apk && \
    apk add --allow-untrusted mssql-tools18_18.4.1.1-1_amd64.apk

# Install PECL extensions: we do these first as docker-php-ext-install will clean up the phpize deps
RUN apk add --no-cache --virtual .icu-build-deps $PHPIZE_DEPS zlib-dev libpng-dev imagemagick-dev oniguruma-dev ghostscript-dev && \
    pecl install imagick && \
    docker-php-ext-enable imagick && \
    apk del --no-network .icu-build-deps
RUN apk add --no-cache --virtual .icu-build-deps $PHPIZE_DEPS yaml-dev && \
    pecl install yaml && \
    docker-php-ext-enable yaml && \
    apk del --no-network .icu-build-deps
RUN apk add --no-cache --virtual .icu-build-deps $PHPIZE_DEPS && \
    pecl install apcu && \
    docker-php-ext-enable apcu && \
    apk del --no-network .icu-build-deps
RUN apk add --no-cache --virtual .icu-build-deps $PHPIZE_DEPS && \
    pecl install pdo_sqlsrv && \
    pecl install sqlsrv && \
    docker-php-ext-enable pdo_sqlsrv sqlsrv && \
    apk del --no-network .icu-build-deps
# msgpack and igbinary required for Relay
RUN apk add --no-cache --virtual .icu-build-deps $PHPIZE_DEPS && \
    pecl install msgpack && \
    pecl install igbinary && \
    docker-php-ext-enable igbinary msgpack && \
    apk del --no-network .icu-build-deps

# Install core extensions
RUN apk add --no-cache libpng-dev && \
    docker-php-ext-configure gd && \
    docker-php-ext-install -j$(nproc) gd && \
    apk del --no-network libpng-dev
RUN apk add --no-cache openldap-dev && \
    docker-php-ext-configure ldap && \
    docker-php-ext-install -j$(nproc) ldap && \
    apk del --no-cache openldap-dev
RUN apk add --no-cache icu-dev && \
    docker-php-ext-configure intl && \
    docker-php-ext-install -j$(nproc) intl && \
    apk del --no-cache icu-dev
RUN docker-php-ext-configure opcache && \
    docker-php-ext-install -j$(nproc) opcache

# Install Relay:
# Install deps
RUN apk add ck hiredis=1.1.0-r2 hiredis-ssl=1.1.0-r2 lz4-libs zstd-libs --repository=http://dl-cdn.alpinelinux.org/alpine/v3.18/main

# Download Relay
RUN PLATFORM=$(uname -m | sed 's/_/-/') \
    && curl -L "https://builds.r2.relay.so/v0.11.0/relay-v0.11.0-php8.4-alpine3.17-$PLATFORM.tar.gz" | tar xz -C /tmp

# Copy relay.{so,ini}
RUN PLATFORM=$(uname -m | sed 's/_/-/') \
    && cp "/tmp/relay-v0.11.0-php8.4-alpine3.17-$PLATFORM/relay.ini" $(php-config --ini-dir)/docker-php-ext-relay.ini \
    && cp "/tmp/relay-v0.11.0-php8.4-alpine3.17-$PLATFORM/relay.so" $(php-config --extension-dir)/relay.so

# Inject UUID
RUN sed -i "s/00000000-0000-0000-0000-000000000000/$(cat /proc/sys/kernel/random/uuid)/" $(php-config --extension-dir)/relay.so

# Install composer
COPY --from=composer:latest /usr/bin/composer /usr/local/bin/composer
